<div class="folgen folgen_<%= settings.view %>">
  <% folgen.forEach((folge, i) => { %>
  <div class="folge-miniatur" data-aos="fade-up">
    <a href="/folge/<%= folge._id %>">
      <div class="cover">
        <!-- <div class="spinner">
          <div class="rect1">?</div>
          <div class="rect2">?</div>
          <div class="rect3">?</div>
        </div> -->
        <img class="lazy" data-src="http://cdn.smehost.net/hcmssmeappscom-delabelsprod/produkte/hoerspiele/ddf_cd_<%= folge.number %>.jpg"
          alt="<%= folge.number %>">
      </div>
    </a>
    <div class="rating">
      <span><%= folge.rating %></span>
      <span><%= folge.release %></span>
      <form action="/user/<% if(user) { %><%= user.id %><% } else { %>null<% }%>/list" method="POST">
        <input type="hidden" name="number" value="<%= folge.number %>">
        <button type="submit"><i class="fas fa-plus"></i> Zur Liste Hinzuf√ºgen</button>
      </form>
    </div>
    <div class="inhalt">
      <a href="/folge/<%= folge._id %>"><h3>Die drei ??? <br> <%= folge.title %></h3></a>
      <p><%= folge.inhalt %></p>
    </div>
  </div>
  <% }) %>
</div>
<!-- <script src="/js/lazy-img.js"></script> -->
<script></script>
<script>
const targets = document.querySelectorAll('.lazy');

const lazyLoad = target => {
  // target.classList.add('hidden')
  const io = new IntersectionObserver((entries, observer) => {

    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        const src = img.getAttribute('data-src');
        // img.classList.add('hidden');
        img.setAttribute('src', src);
        // console.log('hi');
        
        // img.addEventListener('load', () => {
        //   img.classList.remove('hidden');

        //   const parent = img.parentNode;
        //   const spinner = parent.querySelector('.spinner');
        //   parent.removeChild(spinner);
        // })
      }
    });
  });

  io.observe(target);
};

targets.forEach(lazyLoad);
targets.forEach(entry => {
  entry.addEventListener('load', () => {
    // entry.classList.remove('hidden');
    // const parent = entry.parentNode;
    // const spinner = parent.querySelector('.spinner');
    // parent.removeChild(spinner);
  });
});
// targets.forEach((entry) => {
//   entry.addEventListener('load', () => {
//     console.log(entry);
//   })
//   entry.onload = function() {
//     // console.log(entry);
//   }
// })
// targets.forEach(entry => {
//   entry.onload = () => {
//     const parent = entry.parentNode;
//     const spinner = parent.querySelector('.spinner');
//     console.log('done');
//     parent.removeChild(spinner);
//     entry.classList.remove('hidden');
//   }
// })
</script>